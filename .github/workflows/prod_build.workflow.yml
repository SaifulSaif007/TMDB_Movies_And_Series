name: Production builds
on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release-Build"
        default: "Generate release build"
      testers:
        type: choice
        description: "Select tester group"
        options:
          - testers

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      # This will decode the keystore from base 64 text representation that we have stored in secrets
      # and generates and keystore file and gets stored in /android-app path

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.SIGNING_KEY_STORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

        run: |
          echo $ENCODED_STRING > keystore-b64.txt
          base64 -d keystore-b64.txt > keystore.jks

      - name: Build Release apk
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.SIGNING_KEY_STORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: ./gradlew assembleRelease --stacktrace


      - name: Build Release bundle
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.SIGNING_KEY_STORE_PASSWORD }}
          RELEASE_KEYSTORE_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: ./gradlew bundleRelease --stacktrace

      - name: Get release file aab path
        id: releaseAab
        run: echo "aabfile=$(find app/build/outputs/bundle/release/*.aab)" >> $GITHUB_OUTPUT

      - name: Get release file apk path
        id: releaseApk
        run: echo "apkfile=$(find app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

#      - name: Zip Files
#        uses: papeloto/action-zip@v1
#        with:
#          files: ${{ steps.releaseAab.outputs.aabfile }} ${{ steps.releaseApk.outputs.apkfile }}
#          dest: ${{ steps.releaseApk.outputs.apkfile }}.zip

      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups:  ${{ github.event.inputs.testers }}
          file:  ${{ steps.releaseApk.outputs.apkfile }}

      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: ${{ steps.releaseApk.outputs.apkfile }}